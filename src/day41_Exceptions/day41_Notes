Java Day41
Topics: Exceptions Intro

Package name: day41_Exceptions


Access Modifiers:
		public > protected > default > private


Final Keyword: un-changable

		Variables: can not be reassigned

		Methods: can not be overridden

		Classes: can not be inherited (can not be parent)


Exceptions Topic:
		1. Unchecked vs Checked
		2. try & catch blocks --->     short cut For Windows ctrl   +alt + T
                                                    For mac     command+alt + T
		3. Multi-catch block
		4. finally block


OutOfMemoryError: heap memory is full



Exceptions: unexpected or unwanted events

		Unchecked (unexpected event): occurs during the runtime

					all the RuntimeExceptions are unchecked exceptions

		checked (unwanted event): occurs during the compile time

					all the exceptions that are not RuntimeExceptions are checked exception



Exception handling:

		1. Try & Catch blocks: used for handling checked and unchecked exceptions

						try{

							exception code    ---> everytime when exception occurs, object of the exception is created and we are catching it in the catch block

						}catch(ExceptionClass  e){

							e.printStackTrace();

						}


			Multi-catch block: parent exception type can not be placed before the child exception type

			finally block: always gets executed regardless of the exception is being handled or not handled

							to stop the execution of the finally block: System.exit(0)


Interview Question:

		final --> keyword. We can apply it to methods, classes or variables to make them un-modifiable/restrict the User.

		finally --> used with try & catch block for exception handling.
		      Always gets executed regardless of the exception is being handled or not handled.
		      To stop the execution of the finally block: System.exit(0)


		finalize --> method,  garbage collector calls it through the Object to destroy the unreferenced object and
		              this helps with heap memory housekeeping.



next Thursday:
		5. throws keyword
		6. throw keyword
		7. Custom Exception


Next Next Monday (Jan 31st):
	OOP Abstraction



	
	OOP Polymorphism












